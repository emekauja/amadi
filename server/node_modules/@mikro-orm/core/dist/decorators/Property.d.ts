import { Cascade, LoadStrategy } from '../entity';
import { EntityName, AnyEntity, Constructor } from '../typings';
import { Type } from '../types';
export declare function Property<T extends AnyEntity<T>>(options?: PropertyOptions<T>): Function;
export declare type PropertyOptions<T extends AnyEntity<T>> = {
    name?: string;
    fieldName?: string;
    fieldNames?: string[];
    customType?: Type<any>;
    columnType?: string;
    type?: 'string' | 'number' | 'boolean' | 'bigint' | 'ObjectId' | string | object | bigint | Date | Constructor<Type<any>> | Type<any>;
    length?: number;
    onCreate?: (entity: T) => any;
    onUpdate?: (entity: T) => any;
    default?: string | number | boolean | null;
    defaultRaw?: string;
    formula?: string | ((alias: string) => string);
    nullable?: boolean;
    unsigned?: boolean;
    persist?: boolean;
    hidden?: boolean;
    version?: boolean;
    index?: boolean | string;
    unique?: boolean | string;
    lazy?: boolean;
    primary?: boolean;
    serializedPrimaryKey?: boolean;
};
export interface ReferenceOptions<T extends AnyEntity<T>, O extends AnyEntity<O>> extends PropertyOptions<O> {
    entity?: string | (() => EntityName<T>);
    cascade?: Cascade[];
    eager?: boolean;
    strategy?: LoadStrategy;
}
